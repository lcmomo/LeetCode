/*
 * @lc app=leetcode.cn id=621 lang=javascript
 *
 * [621] 任务调度器
 */

 /**
  * 
  给你一个用字符数组 tasks 表示的 CPU 需要执行的任务列表。其中每个字母表示一种不同种类的任务。任务可以以任意顺序执行，并且每个任务都可以在 1 个单位时间内执行完。在任何一个单位时间，CPU 可以完成一个任务，或者处于待命状态。

        然而，两个 相同种类 的任务之间必须有长度为整数 n 的冷却时间，因此至少有连续 n 个单位时间内 CPU 在执行不同的任务，或者在待命状态。

        你需要计算完成所有任务所需要的 最短时间 。

        

        示例 1：

        输入：tasks = ["A","A","A","B","B","B"], n = 2
        输出：8
        解释：A -> B -> (待命) -> A -> B -> (待命) -> A -> B
            在本示例中，两个相同类型任务之间必须间隔长度为 n = 2 的冷却时间，而执行一个任务只需要一个单位时间，所以中间出现了（待命）状态。 
        示例 2：

        输入：tasks = ["A","A","A","B","B","B"], n = 0
        输出：6
        解释：在这种情况下，任何大小为 6 的排列都可以满足要求，因为 n = 0
        ["A","A","A","B","B","B"]
        ["A","B","A","B","A","B"]
        ["B","B","B","A","A","A"]
        ...
        诸如此类
        示例 3：

        输入：tasks = ["A","A","A","A","A","A","B","C","D","E","F","G"], n = 2
        输出：16
        解释：一种可能的解决方案是：
            A -> B -> C -> A -> D -> E -> A -> F -> G -> A -> (待命) -> (待命) -> A -> (待命) -> (待命) -> A
        

        提示：

        1 <= task.length <= 104
        tasks[i] 是大写英文字母
        n 的取值范围为 [0, 100]
*/


/**
 * 
   思路：最短时间有两种情况：
        1. 执行过程没有待命，所有任务连续执行，没有停顿，最短时间就是任务总数
        2. 有待命状态，最短时间应将待命状态计算在内
            执行完所有的任务最短时间是跟数量最多的那个种类的任务数相关的，[A,A,A,B,B] 数量最多的是A，数量3，则执行完所有任务最少需要（3-1）*（n+1）+1， 推广到所有用例，假设数量最多任务数量是X，那么最短时间至少为（x-1）*（n+1）+1；
            此种情况，考虑数量第二多的任务，假设数量第二多的任务数量小于X，那么两个相同任务的间隔内即可插满，如果等于X，则最后一个任务跟在最多任务的最后一次执行后，即最短时间+1，依次类推
 */

// @lc code=start
/**
 * @param {character[]} tasks
 * @param {number} n
 * @return {number}
 */
var leastInterval = function(tasks, n) {
    let obj = {};
    //  遍历所有任务出现的次数
    tasks.map(item => {
        if(obj[item]) {
            obj[item] = obj[item] + 1;
        } else {
            obj[item] = 1;
        }
    })

    //  对次数进行递减排序  
    let arr = [...Object.values(obj)].sort((a,b) => b - a);
    let maxCount = arr[0];
    let res = (maxCount - 1) * (n + 1)  + 1;
    let i = 1;

    while (i < arr.length && arr[i] === maxCount) {
        // 如果存在其他任务出现次数跟最大次数相同， res ++；
        res++;
        i++; 
    }

    return Math.max(tasks.length, res);
};

/**
 *  时间复杂度O（nlogn）主要是排序算法最快时间复杂度
 * 空间复杂度O（n）obj map结构来保存每个任务次数
 */

// let task = ["A","A","A","A","A","A","B","C","D","E","F","G"];
// console.log(leastInterval(task, 2));
// @lc code=end

